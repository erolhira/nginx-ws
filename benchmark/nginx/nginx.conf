events {
    worker_connections 1024;
}
worker_processes 1;

http {

    server {
        listen       8080 default_server;
        server_name  test.com;

        root    /nginx-ws/benchmark/web;
        index  index.html index.htm;

        #any child context can very easily override gzip.
        #gzip is sent within the header Content-Encoding, if the client makes a request with Accept-Encoding.
        gzip on;

        #the amount of compression used. 
        #a lower number resulting in larger files but requiring less server resources.
        #a larger number resulting in smaller files but requiring more server resources.
        #at levels over 5, the reduction in file size or response size becomes very minor.
        #3 or 4 seems to be a good option.
        gzip_comp_level 3;

        #file types or mime types to apply this compression to.
        gzip_types text/javascript text/css;

        location / {
            gzip_static on;
            gzip off;
            add_header Vary Accept-Encoding;
        }

        location ~* \.(css|js|jpg|png)$ {
            access_log off;            

            #tell the receiving client that this resource can be cached.
            add_header Cache-Control public;
            
            #just an older version of the above cache header
            add_header Pragma public;

            #when gzip on; the client still needs to indicate that they're willing to accept a compressed response.
            #the content of this response can vary based on the value of the accept-encoding in the request header.
            add_header Vary Accept-Encoding;

            #expires directive adds Expire and Cache-Control: max-age=[in_seconds].. to the response
            expires 1M;
        }
    }    
}